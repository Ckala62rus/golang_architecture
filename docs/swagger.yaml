basePath: /api/
definitions:
  handler.CreateAuthUser:
    properties:
      email:
        type: string
      password:
        type: string
    type: object
  handler.CreateUser:
    properties:
      age:
        type: integer
      name:
        type: string
    type: object
  handler.UpdateUser:
    properties:
      age:
        type: integer
      name:
        type: string
    type: object
  handler.signInInput:
    properties:
      email:
        type: string
      password:
        type: string
    required:
    - email
    - password
    type: object
  handler.statusResponce:
    properties:
      data: {}
      message:
        type: string
      status:
        type: boolean
    type: object
host: localhost:8081
info:
  contact:
    email: support@swagger.io
    name: API Support
    url: http://www.swagger.io/support
  description: This is a sample server celler server.
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: http://swagger.io/terms/
  title: Swagger Example API
  version: "1.0"
paths:
  /auth/sign-in:
    post:
      consumes:
      - application/json
      description: login and return authorization bearer token
      parameters:
      - description: credentials
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/handler.signInInput'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handler.statusResponce'
      summary: SignIn
      tags:
      - auth
  /auth/sign-up:
    post:
      consumes:
      - application/json
      description: return id created user
      parameters:
      - description: credentials
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/handler.CreateAuthUser'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handler.statusResponce'
      summary: Authentication in system
      tags:
      - auth
  /users/:
    get:
      consumes:
      - application/json
      description: return all users
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handler.statusResponce'
      security:
      - Authorization: []
      summary: Get all users
      tags:
      - users
    post:
      consumes:
      - application/json
      description: create new user
      operationId: login
      parameters:
      - description: credentials
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/handler.CreateUser'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handler.statusResponce'
      security:
      - Authorization: []
      summary: CreateUser
      tags:
      - users
  /users/{id}:
    delete:
      consumes:
      - application/json
      description: Delete user by ID
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handler.statusResponce'
      security:
      - Authorization: []
      summary: Delete user by ID
      tags:
      - users
    get:
      consumes:
      - application/json
      description: get user by ID
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handler.statusResponce'
      security:
      - Authorization: []
      summary: Get user by ID
      tags:
      - users
    put:
      consumes:
      - application/json
      description: update user
      operationId: login
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      - description: credentials
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/handler.UpdateUser'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handler.statusResponce'
      security:
      - Authorization: []
      summary: Update user
      tags:
      - users
  /users/user/{name}:
    get:
      consumes:
      - application/json
      description: get user by Name
      parameters:
      - description: User name
        in: path
        name: name
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handler.statusResponce'
      security:
      - Authorization: []
      summary: Get user by Name
      tags:
      - users
securityDefinitions:
  Authorization:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
